import asyncio
import logging
from TelegramBot.config import config
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.formatting import Text
from aiogram.fsm.state import StatesGroup, State
from create_bot import bot

from TelegramBot.data_base import get_db
from TelegramBot.data_base import User
from TelegramBot.data_base import Package
from sqlalchemy.orm import Session
from TelegramBot.keyboards import keyboards

router = Router()

class MainForms(StatesGroup):
    choosing = State()
    blank = State()

@router.message(Command("start"))
async def main_cmd_start(message: Message, state: FSMContext):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    db: Session = next(get_db())
    user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
    if (user):
        await state.update_data(cur_user=user)
        content = Text(
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –∑–∞–∫–∞–∑—á–∏–∫–∞."
        )
        bot_message = await message.answer(
            **content.as_kwargs(),
            reply_markup=keyboards.user_menu()
        )
        await state.update_data(menu_bot_message=bot_message.message_id)
        await state.set_state(MainForms.choosing)
    else:
        content = Text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–µ—Ä–≤–∏—Å—É MoveBro! üöö\n –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ \"–ù–∞—á–∞—Ç—å\"")
        bot_message = await message.answer(
            **content.as_kwargs(),
            reply_markup=keyboards.get_ready()
        )
        await state.update_data(start_registration_bot_message=bot_message.message_id)
        await state.set_state(MainForms.blank)

@router.message(F.text, MainForms.choosing)
async def start_questionnaire_process(message: Message, state: FSMContext):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)