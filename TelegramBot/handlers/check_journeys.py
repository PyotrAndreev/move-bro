import datetime

import aiogram_dialog.api.entities.modes
from aiogram import Router, F
from aiogram.fsm.state import StatesGroup, State
from aiogram_dialog import DialogManager, Window, StartMode
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.kbd import ScrollingGroup, Select, Button, Column, Row, SwitchTo, Back
from aiogram_dialog.widgets.text import Const, Format
from typing import Any
from aiogram_dialog import (
    Data,
    Dialog,
    DialogManager,
    ShowMode,
    StartMode,
    Window,
)

from aiogram.types import InlineKeyboardButton
from asyncio import sleep, create_task

from TelegramBot.data_base import get_db, Package, User, PackageNote, Courier, Courier_Request
from sqlalchemy.orm import Session
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup
from aiogram_dialog import Dialog
from TelegramBot.keyboards import keyboards
from TelegramBot.logging_helper import set_info_log
from TelegramBot.create_bot import bot
from TelegramBot.enum_types import *

dialog_router = Router()

class CheckJourneysStates(StatesGroup):
    choosing_journey = State()
    view = State()
    delete_journey = State()
    changing = State()
    edit_shipping_country = State()
    edit_shipping_state = State()
    edit_shipping_city = State()
    edit_delivery_country = State()
    edit_delivery_state = State()
    edit_delivery_city = State()
    edit_comment = State()
    checking = State()
    enrolling = State()
    writing_note = State()

async def on_dialog_start(start_data: Any, manager: DialogManager):
    manager.dialog_data['enroll_comment'] = "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"

async def back_to_menu(callback: CallbackQuery, button: Button, manager: DialogManager):
    from TelegramBot.handlers.courier_menu import CourierMenuStates

    await callback.message.delete()
    await manager.start(CourierMenuStates.choosing_menu, mode=StartMode.RESET_STACK)

async def journeys_getter(dialog_manager: DialogManager, **kwargs):
    db: Session = next(get_db())
    user = db.query(User).filter(User.telegram_id == dialog_manager.event.from_user.id).first()
    courier: Courier = user.courier
    if courier is None:
        courier: Courier = Courier(user=user)
        db.add(courier)
        db.commit()
    journeys = db.query(Courier_Request).filter(Courier_Request.courier_id == courier.courier_id)
    return {
        'journeys': journeys
    }

async def on_journey_selected(callback: CallbackQuery, widget: Any, manager: DialogManager,
                             item: int):
    manager.dialog_data['journey_id'] = item
    db: Session = next(get_db())
    manager.dialog_data['journey'] = db.query(Courier_Request).filter(Courier_Request.courier_request_id == item).first()
    await manager.switch_to(CheckJourneysStates.view)

async def delete_journey(callback: CallbackQuery, widget: Any, manager: DialogManager):
    db: Session = next(get_db())
    req: Courier_Request | None = db.get(Courier_Request, manager.dialog_data['journey_id'])
    if req:
        db.delete(req)
        db.commit()
        message = await callback.bot.send_message(callback.message.chat.id, "–ü–æ–µ–∑–¥–∫–∞ —É–¥–∞–ª–µ–Ω–∞! üóëÔ∏è")
        create_task(delete_message_after_time(message))
    else:
        message = await callback.bot.send_message(callback.message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å(")
        create_task(delete_message_after_time(message))
    await manager.switch_to(CheckJourneysStates.choosing_journey)

async def delete_message_after_time(message: Message):
    await sleep(5)
    try:
        await message.delete()
    except Exception:
        pass

async def process_shipping_country(message: Message, widget: Any, manager: DialogManager):
    new_shipping_country = message.text
    db: Session = next(get_db())
    journey = db.query(Courier_Request).filter(Courier_Request.courier_request_id == manager.dialog_data.get('journey').courier_request_id).first()
    if journey:
        journey.shipping_country = new_shipping_country
        db.commit()                   
        manager.dialog_data['journey'] = journey
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
    try:
        await message.delete()
    except Exception as e:
        pass
    confirmation_message = await message.answer(f"–°—Ç—Ä–∞–Ω–∞ –Ω–∞—á–∞–ª–∞ –ø—É—Ç–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_shipping_country}.")
    await sleep(5)
    try:
        await confirmation_message.delete()
    except Exception as e:
        pass
    await manager.switch_to(CheckJourneysStates.view, show_mode=ShowMode.EDIT)

async def process_shipping_state(message: Message, widget: Any, manager: DialogManager):
    new_shipping_state = message.text
    db: Session = next(get_db())
    journey = db.query(Courier_Request).filter(Courier_Request.courier_request_id == manager.dialog_data.get('journey').courier_request_id).first()
    if journey:
        journey.shipping_state = new_shipping_state
        db.commit()                   
        manager.dialog_data['journey'] = journey
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
    try:
        await message.delete()
    except Exception as e:
        pass
    confirmation_message = await message.answer(f"–®—Ç–∞—Ç/–æ–±–ª–∞—Å—Ç—å/–æ–∫—Ä—É–≥(–∏ —Ç.–¥.) –Ω–∞—á–∞–ª–∞ –ø—É—Ç–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_shipping_state}.")
    await sleep(5)
    try:
        await confirmation_message.delete()
    except Exception as e:
        pass
    await manager.switch_to(CheckJourneysStates.view, show_mode=ShowMode.EDIT)

async def process_shipping_city(message: Message, widget: Any, manager: DialogManager):
    new_shipping_city = message.text
    db: Session = next(get_db())
    journey = db.query(Courier_Request).filter(Courier_Request.courier_request_id == manager.dialog_data.get('journey').courier_request_id).first()
    if journey:
        journey.shipping_city = new_shipping_city
        db.commit()                   
        manager.dialog_data['journey'] = journey
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
    try:
        await message.delete()
    except Exception as e:
        pass
    confirmation_message = await message.answer(f"–ì–æ—Ä–æ–¥ –Ω–∞—á–∞–ª–∞ –ø—É—Ç–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_shipping_city}.")
    await sleep(5)
    try:
        await confirmation_message.delete()
    except Exception as e:
        pass
    await manager.switch_to(CheckJourneysStates.view, show_mode=ShowMode.EDIT)

async def process_delivery_country(message: Message, widget: Any, manager: DialogManager):
    new_delivery_country = message.text
    db: Session = next(get_db())
    journey = db.query(Courier_Request).filter(Courier_Request.courier_request_id == manager.dialog_data.get('journey').courier_request_id).first()
    if journey:
        journey.delivery_country = new_delivery_country
        db.commit()                   
        manager.dialog_data['journey'] = journey
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
    try:
        await message.delete()
    except Exception as e:
        pass
    confirmation_message = await message.answer(f"–°—Ç—Ä–∞–Ω–∞ –∫–æ–Ω—Ü–∞ –ø—É—Ç–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_delivery_country}.")
    await sleep(5)
    try:
        await confirmation_message.delete()
    except Exception as e:
        pass
    await manager.switch_to(CheckJourneysStates.view, show_mode=ShowMode.EDIT)

async def process_delivery_state(message: Message, widget: Any, manager: DialogManager):
    new_delivery_state = message.text
    db: Session = next(get_db())
    journey = db.query(Courier_Request).filter(Courier_Request.courier_request_id == manager.dialog_data.get('journey').courier_request_id).first()
    if journey:
        journey.delivery_state = new_delivery_state
        db.commit()                   
        manager.dialog_data['journey'] = journey
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
    try:
        await message.delete()
    except Exception as e:
        pass
    confirmation_message = await message.answer(f"–®—Ç–∞—Ç/–æ–±–ª–∞—Å—Ç—å/–æ–∫—Ä—É–≥(–∏ —Ç.–¥.) –∫–æ–Ω—Ü–∞ –ø—É—Ç–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_delivery_state}.")
    await sleep(5)
    try:
        await confirmation_message.delete()
    except Exception as e:
        pass
    await manager.switch_to(CheckJourneysStates.view, show_mode=ShowMode.EDIT)

async def process_delivery_city(message: Message, widget: Any, manager: DialogManager):
    new_delivery_city = message.text
    db: Session = next(get_db())
    journey = db.query(Courier_Request).filter(Courier_Request.courier_request_id == manager.dialog_data.get('journey').courier_request_id).first()
    if journey:
        journey.delivery_city = new_delivery_city
        db.commit()                   
        manager.dialog_data['journey'] = journey
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
    try:
        await message.delete()
    except Exception as e:
        pass
    confirmation_message = await message.answer(f"–ì–æ—Ä–æ–¥ –∫–æ–Ω—Ü–∞ –ø—É—Ç–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_delivery_city}.")
    await sleep(5)
    try:
        await confirmation_message.delete()
    except Exception as e:
        pass
    await manager.switch_to(CheckJourneysStates.view, show_mode=ShowMode.EDIT)

async def process_comment(message: Message, widget: Any, manager: DialogManager):
    new_comment = message.text
    db: Session = next(get_db())
    journey = db.query(Courier_Request).filter(Courier_Request.courier_request_id == manager.dialog_data.get('journey').courier_request_id).first()
    if journey:
        journey.comment = new_comment
        db.commit()                   
        manager.dialog_data['journey'] = journey
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
    try:
        await message.delete()
    except Exception as e:
        pass
    confirmation_message = await message.answer(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.")
    await sleep(5)
    try:
        await confirmation_message.delete()
    except Exception as e:
        pass
    await manager.switch_to(CheckJourneysStates.view, show_mode=ShowMode.EDIT)

async def orders_getter(dialog_manager: DialogManager, **kwargs):
    db: Session = next(get_db())
    user = db.query(User).filter(User.telegram_id == dialog_manager.event.from_user.id).first()
    courier = db.query(Courier).filter(Courier.user_id == user.user_id).first()
    journey_id = dialog_manager.dialog_data["journey"].courier_request_id
    # packages = db.query(Package).filter(Package.customer_id != user.user_id)
    packages = db.query(Package).filter(Package.courier_id == None, Package.courier_request_id == journey_id)
    return {
        'packages': packages
    }

async def on_orders_selected(callback: CallbackQuery, widget: Any, manager: DialogManager,
                             item: int):  # item —Ç–µ–ø–µ—Ä—å —Å—Ç—Ä–æ–∫–∞!
    manager.dialog_data['package_id'] = item  # item - —ç—Ç–æ ID –∫–æ—Ç–æ—Ä—ã–π –º—ã –ø–æ–ª—É—á–∏–º
    db: Session = next(get_db())
    manager.dialog_data['package'] = db.query(Package).filter(Package.package_id == item, Package.courier_id == None).first()
    await manager.switch_to(CheckJourneysStates.enrolling)

    user_id = manager.event.from_user.id
    user = db.query(User).filter(User.telegram_id == user_id).first()
    set_info_log(db, user.telegram_id, user.user_id,
                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–ª –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º –ø–æ—Å—ã–ª–∫–∏ {manager.dialog_data['package']}")
    
async def on_enroll_comment_changed(
        message: Message, dialog: MessageInput, manager: DialogManager
):
    manager.dialog_data['enroll_comment'] = message.text
    await message.delete()
    manager.show_mode = aiogram_dialog.api.entities.modes.ShowMode.EDIT

async def add_enroll(c: CallbackQuery, button: Button, manager: DialogManager):
    package: Package = manager.dialog_data.get('package')
    comment = manager.dialog_data.get('enroll_comment')
    db: Session = next(get_db())
    user = db.query(User).filter(User.telegram_id == c.from_user.id).first()
    package_enroll: PackageNote = PackageNote(content=comment, sender=user, sender_type=SenderEnum.courier,
                                              package=package, creation_date=datetime.datetime.now())
    db.add(package_enroll)
    db.commit()
    kb_list = [
        [InlineKeyboardButton(text='–ü—Ä–∏–Ω—è—Ç—å', callback_data=f"accept_enroll_{package.package_id}_{user.user_id}")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb_list)
    await bot.send_message(package.user.telegram_id,
                           f"–ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –ø–æ—Å—ã–ª–∫—É #{package.package_id}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:@{c.from_user.username}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:{comment}", reply_markup=keyboard)
    await c.answer("–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç–∫–ª–∏–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é!")
    await c.message.delete()
    await manager.done()
    await c.message.answer(text="–ú–µ–Ω—é –∑–∞–∫–∞–∑—á–∏–∫–∞:", reply_markup=keyboards.user_menu())

dialog = Dialog(
    Window(
        Const('–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∑–∞—è–≤–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞'),
        ScrollingGroup(
            Select(
                Format("{item.delivery_city}"),
                id="journey_select",
                items='journeys',
                item_id_getter=lambda x: x.courier_request_id,
                on_click=on_journey_selected,
            ),
            width=1,
            height=5,
            id="choosing_journey"
        ),
        Button(text=Const("–ù–∞–∑–∞–¥"), on_click=back_to_menu, id="back_to_menu"),
        getter=journeys_getter,
        state=CheckJourneysStates.choosing_journey
    ),
    Window(
        Format("<b>–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏</b>: {dialog_data[journey].shipping_country}, {dialog_data[journey].shipping_state}, {dialog_data[journey].shipping_city}\n"
            "<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b>: {dialog_data[journey].delivery_country}, {dialog_data[journey].delivery_state}, {dialog_data[journey].delivery_city}\n"
            "<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>: {dialog_data[journey].comment}"),
        Column(SwitchTo(Const('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç'), 'check', CheckJourneysStates.checking),
            SwitchTo(Const('–ò–∑–º–µ–Ω–∏—Ç—å'), 'changing', CheckJourneysStates.changing),
            SwitchTo(Const('–£–¥–∞–ª–∏—Ç—å'), id="delete_journey", state=CheckJourneysStates.delete_journey),
            SwitchTo(Const('–ù–∞–∑–∞–¥'),'back_to_choosing_orders', CheckJourneysStates.choosing_journey)),
        state=CheckJourneysStates.view,
        parse_mode="HTML"
    ),
    Window(
        Const('–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∑–∞–∫–∞–∑ –∏–∑ —Å–ø–∏—Å–∫–∞'),
        ScrollingGroup(
            Select(
                Format("{item.delivery_city}"),
                id="package_select",
                items='packages',
                item_id_getter=lambda x: x.package_id,
                on_click=on_orders_selected,
            ),
            width=1,
            height=5,
            id="choosing_package"
            ),
        SwitchTo(Const('–ù–∞–∑–∞–¥'), state=CheckJourneysStates.view, id='back_to_filtering'),
        getter=orders_getter,
        state=CheckJourneysStates.checking
    ),
    Window(
        Format("<b>–í–µ—Å –ø–æ—Å—ã–ª–∫–∏</b>: {dialog_data[package].weight} –∫–≥\n"
            "<b>–î–ª–∏–Ω–∞ –ø–æ—Å—ã–ª–∫–∏</b>: {dialog_data[package].length} —Å–º\n"
            "<b>–®–∏—Ä–∏–Ω–∞ –ø–æ—Å—ã–ª–∫–∏</b>: {dialog_data[package].width} —Å–º\n"
            "<b>–í—ã—Å–æ—Ç–∞ –ø–æ—Å—ã–ª–∫–∏</b>: {dialog_data[package].height} —Å–º\n"
            "<b>–¶–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏</b>: {dialog_data[package].cost} —Ä—É–±\n"
            "<b>–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏</b>: {dialog_data[package].shipping_country}, {dialog_data[package].shipping_state}, {dialog_data[package].shipping_city}, {dialog_data[package].shipping_street}, {dialog_data[package].shipping_house}, {dialog_data[package].shipping_postal_code}\n"
            "<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b>: {dialog_data[package].delivery_country}, {dialog_data[package].delivery_state}, {dialog_data[package].delivery_city}, {dialog_data[package].delivery_street}, {dialog_data[package].delivery_house}, {dialog_data[package].delivery_postal_code}\n"
            "<b>–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è</b>: {dialog_data[package].recipient_name}\n"
            "<b>–ü–æ—á—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è</b>: {dialog_data[package].recipient_email}\n"
            "<b>–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è</b>: {dialog_data[package].recipient_phone}\n"
            "<b>–¢–µ–ª–µ–≥—Ä–∞–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è</b>: {dialog_data[package].recipient_telegram_id}\n"),  # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥ –≤ —á–∞—Ç
        Column(SwitchTo(Const('–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è'), 'switching_to_note_writing', CheckJourneysStates.writing_note),
            SwitchTo(Const('–ù–∞–∑–∞–¥'),'back_to_choosing_orders', CheckJourneysStates.checking)),
        state=CheckJourneysStates.enrolling,
        parse_mode="HTML"
    ),
    Window(
        Format(
            '–û—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é(–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:{dialog_data[enroll_comment]}\n–í–ê–ñ–ù–û:–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å", –≤—ã –¥–∞—ë—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É –≤–∞—à–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Å–≤—è–∑–∏'),
        MessageInput(on_enroll_comment_changed),
        Column(Button(Const('–û—Ç–ø—Ä–∞–≤–∏—Ç—å'),
                    on_click=add_enroll,
                    id='courier_menu'),
            SwitchTo(Const('–ù–∞–∑–∞–¥'), 'back_to_order', CheckJourneysStates.enrolling)),
        state=CheckJourneysStates.writing_note
    ),
    Window(
        Format("<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—É—é –∑–∞—è–∫—É?</b>"),
        Row(Button(text=Const("–î–∞"), on_click=delete_journey, id="delete_journey"),
            SwitchTo(Const('–ù–µ—Ç'), id="back", state=CheckJourneysStates.view)),
        state=CheckJourneysStates.delete_journey,
        parse_mode="HTML"
    ),
    Window(
        Format("<b>–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏</b>: {dialog_data[journey].shipping_country}, {dialog_data[journey].shipping_state}, {dialog_data[journey].shipping_city}\n"
            "<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b>: {dialog_data[journey].delivery_country}, {dialog_data[journey].delivery_state}, {dialog_data[journey].delivery_city}\n"
            "<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>: {dialog_data[journey].comment}\n\n"
            "<b>–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?</b>"),
        Column(
            SwitchTo(Const('–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω—É –Ω–∞—á–∞–ª–∞ –ø—É—Ç–∏'), id="edit_shipping_country", state=CheckJourneysStates.edit_shipping_country),
            SwitchTo(Const('–ò–∑–º–µ–Ω–∏—Ç—å —à—Ç–∞—Ç/–æ–±–ª–∞—Å—Ç—å/–æ–∫—Ä—É–≥(–∏ —Ç.–¥.) –Ω–∞—á–∞–ª–∞ –ø—É—Ç–∏'), id="edit_shipping_state", state=CheckJourneysStates.edit_shipping_state),
            SwitchTo(Const('–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –Ω–∞—á–∞–ª–∞ –ø—É—Ç–∏'), id="edit_shipping_city", state=CheckJourneysStates.edit_shipping_city),
            SwitchTo(Const('–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω—É –∫–æ–Ω—Ü–∞ –ø—É—Ç–∏'), id="edit_delivery_country", state=CheckJourneysStates.edit_delivery_country),
            SwitchTo(Const('–ò–∑–º–µ–Ω–∏—Ç—å —à—Ç–∞—Ç/–æ–±–ª–∞—Å—Ç—å/–æ–∫—Ä—É–≥(–∏ —Ç.–¥.) –∫–æ–Ω—Ü–∞ –ø—É—Ç–∏'), id="edit_delivery_state", state=CheckJourneysStates.edit_delivery_state),
            SwitchTo(Const('–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –∫–æ–Ω—Ü–∞ –ø—É—Ç–∏'), id="edit_delivery_city", state=CheckJourneysStates.edit_delivery_city),
            SwitchTo(Const('–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'), id="edit_comment", state=CheckJourneysStates.edit_comment),
            SwitchTo(Const('–ù–∞–∑–∞–¥'), id='back_view', state=CheckJourneysStates.view)),
        state=CheckJourneysStates.changing,
        parse_mode="HTML"
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω—É –Ω–∞—á–∞–ª–∞ –ø—É—Ç–∏:"),
        MessageInput(process_shipping_country),
        SwitchTo(Const('–ù–∞–∑–∞–¥'), id='back_changing', state=CheckJourneysStates.changing),
        state=CheckJourneysStates.edit_shipping_country
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π(—É—é) —à—Ç–∞—Ç/–æ–±–ª–∞—Å—Ç—å/–æ–∫—Ä—É–≥(–∏ —Ç.–¥.) –Ω–∞—á–∞–ª–∞ –ø—É—Ç–∏:"),
        MessageInput(process_shipping_state),
        SwitchTo(Const('–ù–∞–∑–∞–¥'), id='back_changing', state=CheckJourneysStates.changing),
        state=CheckJourneysStates.edit_shipping_state
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –Ω–∞—á–∞–ª–∞ –ø—É—Ç–∏:"),
        MessageInput(process_shipping_city),
        SwitchTo(Const('–ù–∞–∑–∞–¥'), id='back_changing', state=CheckJourneysStates.changing),
        state=CheckJourneysStates.edit_shipping_city
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω—É –∫–æ–Ω—Ü–∞ –ø—É—Ç–∏:"),
        MessageInput(process_delivery_country),
        SwitchTo(Const('–ù–∞–∑–∞–¥'), id='back_changing', state=CheckJourneysStates.changing),
        state=CheckJourneysStates.edit_delivery_country
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π(—É—é) —à—Ç–∞—Ç/–æ–±–ª–∞—Å—Ç—å/–æ–∫—Ä—É–≥(–∏ —Ç.–¥.) –∫–æ–Ω—Ü–∞ –ø—É—Ç–∏:"),
        MessageInput(process_delivery_state),
        SwitchTo(Const('–ù–∞–∑–∞–¥'), id='back_changing', state=CheckJourneysStates.changing),
        state=CheckJourneysStates.edit_delivery_state
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –∫–æ–Ω—Ü–∞ –ø—É—Ç–∏:"),
        MessageInput(process_delivery_city),
        SwitchTo(Const('–ù–∞–∑–∞–¥'), id='back_changing', state=CheckJourneysStates.changing),
        state=CheckJourneysStates.edit_delivery_city
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:"),
        MessageInput(process_comment),
        SwitchTo(Const('–ù–∞–∑–∞–¥'), id='back_changing', state=CheckJourneysStates.changing),
        state=CheckJourneysStates.edit_comment
    ),
    on_start=on_dialog_start
)

dialog_router.include_router(dialog)

@dialog_router.callback_query(F.data == "check_journeys")
async def start_choosing(call: CallbackQuery, dialog_manager: DialogManager):
    await dialog_manager.start(CheckJourneysStates.choosing_journey, mode=StartMode.RESET_STACK)